{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ADB Pairing / Connection Guide","text":"<p>If your device is not rooted, you need to use the Android Debug Bridge (ADB) with some of our apps which require extra privileges (including Permission Manager X, WhatsRunning and Backopier). This is a step-by-step guide how you can enable ADB and configure it to work with the app.</p> <p>Apps may not use ADB on all devices</p> <p>Some OEMs block the ability of apps to establish a local ADB connection. See the example of Amazon Fire TV. On such ROMs root is the only option, unfortunately.</p> <p>ADB is limited</p> <p>ADB is not as powerful as root is. See the Limitations of ADB.</p> <p>Note</p> <p>The following instructions apply to near-AOSP ROMs. Customized ROMs might have different or missing settings.</p> <p>First enable the Developer Options. Then follow the Android 10- or Android 11+ guide whichever applicable to your device.</p> <ul> <li>Developer Options</li> <li>Android 10 and below<ul> <li>Enable TCP/IP<ul> <li>Verification (Optional)</li> </ul> </li> <li>Connect the app</li> </ul> </li> <li>Android 11 and above<ul> <li>Android's mDNS service</li> <li>Pairing / Connecting<ul> <li>Notification / service</li> <li>Split-screen</li> </ul> </li> <li>ADB depends on Wi-Fi</li> </ul> </li> </ul>"},{"location":"adb-connect-svc/","title":"ADB Connect Service","text":"<p>Certain features of the apps require that root or ADB privileges are available as soon as the device reboots. For instance Permission Watcher, Scheduled Checks and Process Watcher. But if ADB has not been enabled by the time the app starts after boot, the app will no more try to connect to ADB unless explicitly done by opening the app.</p> <p>There's a solution. If you enable ADB on boot in an automated way, you can notify the app by sending the following <code>Intent</code> that ADB has been enabled:</p> <pre><code>am startservice -a PKG_NAME.action.ADB_CONNECT -d adb://:5555\n</code></pre> <p>where PKG_NAME is the package name of the app and <code>5555</code> is the ADB port. You can also pass the host along with the port like <code>adb://127.0.0.1:5555</code>.</p> <p>For Backopier, the command should be:</p> <pre><code>am startservice -a com.mirfatif.backopier.action.ADB_CONNECT -d adb://:5555\n</code></pre> <p>Tip</p> <p>Read here how to use the <code>am</code> tool to start an app's service.</p> <p>You can also try <code>am start-foreground-service</code> if <code>am startservice</code> not works.</p> <p>Make sure to use the correct package name depending on the app and its version (see PMX versions and WhatsRunning versions).</p> Here's a list of package names: <ul> <li>PMX<ul> <li>Free / Play Store Pro: <code>com.mirfatif.permissionmanagerx</code></li> <li>Standalone Pro: <code>com.mirfatif.permissionmanagerx.pro</code></li> </ul> </li> <li>WhatsRunning<ul> <li>Play Store Free: <code>com.mirfatif.whatsrunning.ps</code></li> <li>Play Store Pro: <code>com.mirfatif.whatsrunning.ps.pro</code></li> <li>Standalone Free: <code>com.mirfatif.whatsrunning</code></li> <li>Standalone Pro: <code>com.mirfatif.whatsrunning.pro</code></li> </ul> </li> <li>Backopier: <code>com.mirfatif.backopier</code></li> </ul> <p>Note</p> <p>Unattended ADB connection works only if you've already checked the \"Alway allow from this computer\" option while allowing USB debugging to the app. See Connect the app to ADB.</p>"},{"location":"adb-limits/","title":"Limitations of ADB","text":"<p>ADB is not as powerful as root is. Apps may take more precessing time when they are running with ADB e.g. when building a list or doing complex calculations.</p> <p>Additionally, on some OEM ROMs, the ADB functionality might be crippled due to lacking permissions or other restrictions. For instance:</p> <ul> <li>PMX cannot change the system-fixed permissions when running with ADB.</li> </ul> <p>Similarly, WhatsRunning cannot get the following information with ADB:</p> <ul> <li>Process I/O (Input/Output) size and I/O priority</li> <li>ZRAM size and usage details (swap)</li> <li>Process <code>exe</code> (executable) path</li> </ul> <p>You can check the current status of what ADB can do in the app. See details for PMX and WhatsRunning.</p> <p>Unfortunately we cannot do anything about it. And therefore some features are available only on rooted devices.</p> <p>Also note that some OEMs add extra settings to control ADB's privileges. For instance, you need to:</p> <ul> <li>Uncheck \"Disable Permission Monitoring\" on Oppo phones</li> <li>\"Allow granting permissions\" in Security Settings on Xiaomi phones</li> </ul> <p>See this question for more details.</p>"},{"location":"android-10/","title":"Android 10 and below","text":"<p>Tip</p> <p>Using Android 11 or above? Android 11 guide is more convenient.</p> <p>On Android 10 and earlier versions, ADB must be enabled in USB mode first. Then you can switch to network or TCP/IP mode. Using ADB in USB mode requires a computer.</p> <p>Connecting the Android device to a PC and switching to TCP/IP mode is a one-time process. But you need to repeat this after every restart.</p> <p>Note</p> <p>Before proceeding further, make sure that you have enabled the Developer Options.</p> <p>Some devices (usually custom ROMs) have ADB over Network or Wireless Debugging setting available in Developer Options:</p> <p></p> <p>In such cases, you don't need to connect the device to a PC. Just enable the ADB TCP/IP mode from within the Developer Options.</p> <p>For other devices which only have ADB USB mode setting available in Developer Options, follow the instructions given below.</p>"},{"location":"android-10/#tcp-ip","title":"Enable TCP/IP","text":"<ul> <li>Enable Android debugging / USB debugging in Developer Options.</li> <li>Connect the device to the PC with a USB cable.</li> <li> <p>On PC, open a terminal window (or command prompt on Windows) and run:</p> <p><code>adb tcpip 5555</code></p> <p>where <code>5555</code> is the port on which you want to start the ADB daemon (<code>adbd</code>) in TCP/IP mode. You'll use this port number later.</p> </li> </ul> <p>Tip</p> <p>You must have <code>adb</code> executable available on your PC to run the above command. If not, here's the official download link.</p> <p>Once these steps are completed, TCP/IP (wireless debugging) should be enabled.</p>"},{"location":"android-10/#tcp-ip-verify","title":"Verification (Optional)","text":"<ul> <li>Disconnect the USB cable from the device.</li> <li>Connect your device and PC to a common Wi-Fi network.</li> <li>Get the IP address of the device (usually in Wi-Fi settings or in Settings \u2192 About), say it's <code>192.168.1.1</code>.</li> <li> <p>On PC run:</p> <p><code>adb connect 192.168.1.1</code></p> </li> <li> <p>Run again:</p> <p><code>adb shell id -u</code></p> </li> </ul> <p>It should print <code>2000</code> (or <code>0</code>).</p>      Android 10 ADB Guide"},{"location":"android-10/#connect","title":"Connect the app to ADB","text":"<ul> <li>Open the app and tap ADB Access.</li> <li>Enter the port <code>5555</code> (from the previous section) and tap connect.</li> <li>Allow USB Debugging if asked.</li> </ul>      Android 10 ADB Guide  <p>Note</p> <p>You should leave the USB debugging enabled in Developer Options. Disabling the ADB will disconnect the app from ADB.</p>"},{"location":"android-11/","title":"Android 11 and above","text":"<p>Note</p> <p>Using Android 10 or earlier version? Follow the Android 10 guide.</p> <p>On Android 11 and above, it's possible to turn on Wireless Debugging without connecting to a PC. There's a built-in option to turn on Wireless debugging (over Wi-Fi).</p>"},{"location":"android-11/#mdns-svc","title":"mDNS Service","text":"<p>Android has a service named <code>mDNS</code> (multi-cast Domain Name System) which facilitates the discovery of services on local network. <code>adb</code> relies on this service to discover and automatically connect to devices once they are paired.</p> <p>If <code>mDNS</code> service is working correctly, you don't need to enter the pairing and connection ports manually, but only the pairing code. The app automatically discovers the ports using the <code>mDNS</code> service.</p> <p>If <code>mDNS</code> service is not working on your device, you can try a few things:</p> <ul> <li>Disabling the Wireless debugging (and USB debugging) force starts the <code>mdnsd</code> service (which cannot be done manually without root).</li> <li>Force stopping the app recreates the <code>mDNS</code> broadcast listeners.</li> </ul> <p>Note</p> <p>Before proceeding further, please make sure that you have enabled the Developer Options.</p>"},{"location":"android-11/#pair","title":"ADB Pairing / Connecting","text":"<p>Enable Wireless debugging in Developer Options, and also check Disable ADB authorization timeout in order to avoid repeating the pairing steps again and again.</p> <p></p> <p>It's a 2-step process:</p> <ul> <li>Pairing (needs pairing port and code)</li> <li>Connecting (needs connection port)</li> </ul> <p>Pairing is an authentication mechanism somewhat like Bluetooth pairing. While connecting is similar to the legacy TCP/IP connection.</p> <p> </p> <p>There are 2 options to perform the pairing and connection. Proceed with whichever you find more convenient.</p>"},{"location":"android-11/#pair-svc","title":"Pairing Method 1: Notification","text":"<ul> <li>Connect your device to a Wi-Fi network.</li> <li>Open the app and tap ADB Access. Under Pairing Option 1, tap \"Show Notification\" to start the pairing service. A notification appears.</li> <li>Enable Wireless debugging in Developer Options.</li> <li>Open Wireless debugging screen and tap on \"Pair device with pairing code\".</li> <li>Note the (1) pairing port number, (2) pairing code, and (3) connection port number.</li> <li>Enter the 3 parameters in the notification one by one as requested. Press Enter / Send button in the notification after entering each value.</li> </ul> <p>Pairing is performed after you enter both pairing parameters. While connection is performed as soon as the connection port is entered.</p> <p>Info</p> <p>You won't be asked to enter the pairing and connection ports if mDNS service is working correctly.</p>      Android 11 ADB Pairing Guide"},{"location":"android-11/#pair-screen","title":"Pairing Method 2: Split-Screen","text":"<ul> <li>Connect your device to a Wi-Fi network.</li> <li>Open the app and tap ADB Access. Tap \"Open Developer Options\" button to open the same.</li> <li>Enable Wireless debugging in Developer Options.</li> <li>Open Wireless debugging screen and tap on \"Pair device with pairing code\".</li> <li>Note the (1) pairing port number, (2) pairing code, and (3) connection port number.</li> <li>Switch to Split-Screen to open the app and Developer Options simultaneously.</li> <li>In the app, scroll to Pairing Option 2.</li> <li>Enter the pairing code and port, and tap the \"Pair\" button. Pairing is performed.</li> <li>After successful pairing, connection section is opened. Enter the connection port, and tap the \"Connect\" button. Connection is performed.</li> </ul> <p>Info</p> <p>You don't need to manually enter the pairing and connection ports if mDNS service is working correctly. These fields are auto-filled.</p>      Android 11 ADB Pairing Guide  <p>Note</p> <p>You should leave the Wireless debugging or USB debugging enabled in Developer Options. Disabling the ADB will disconnect the app from ADB.</p>"},{"location":"android-11/#adb-wifi-dependency","title":"ADB depends on Wi-Fi","text":"<p>A problem with pairing is that you need to keep the device connected to a Wi-Fi network in order to keep the Wireless debugging enabled. But the device can disconnect from a Wi-Fi network intermittently, particularly when the screen is off. In this case the app loses the ADB connection. It can be frustrating.</p> <p>There are 2 possible solutions to this problem:</p> <ol> <li>Also enable USB debugging along with Wireless debugging before performing pairing.</li> <li> <p>Or check the option Auto switch to TCP/IP in app settings. It restarts the ADB daemon (<code>adbd</code>) in the legacy TCP/IP mode after every successful pairing.</p> <p></p> </li> </ol> <p>Now, after every pairing, you can turn-off the Wireless debugging and leave the USB debugging enabled.</p> <p>An additional benefit of the second approach is that even if you turn off the USB debugging, simply turn it on and the app should connect to ADB. No re-pairing is required unless you restart the device. It's because the TCP/IP settings (system property: <code>service.adb.tcp.port</code>) is not reset when USB debugging is disabled. See more details here.</p>"},{"location":"dev-opts/","title":"Developer Options","text":"<p>In order to use ADB, you first need to unhide the Developer Options. This is a one-time process. But on some OEM ROMs you might need to repeat this after every restart.</p> <ul> <li>Go to Settings \u2192 About</li> <li>Tap Build number 5 to 7 times</li> </ul> <p>Developer options should appear directly under Settings or in Settings \u2192 System at the bottom.</p> <p>Once enabled, you can also open the Developers Options from within the app. See the following short video guide.</p>      Unhide Developer Options  <p>Now to start using ADB, you can proceed to Android 10- or Android 11+ guide whichever applicable to your device.</p>"}]}